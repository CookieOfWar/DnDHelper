<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>